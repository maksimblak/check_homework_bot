from enum import Enum, auto

from telebot.types import KeyboardButton, ReplyKeyboardMarkup, Message

from database.main_db import teacher_crud
import homeworkbot.admin_handlers.admin_menu as admin_keyboard
from database.main_db.admin_crud import is_admin
from homeworkbot import bot
from homeworkbot.teacher_handlers.utils import create_teacher_groups_button, create_teacher_discipline_button
from homeworkbot.admin_handlers.unban_student import create_unban_student_buttons


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
class TeacherException(Exception):
    def __init__(self, message):
        super().__init__(message)


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
class TeacherCommand(Enum):
    BAN_STUDENT = auto()
    UNBAN_STUDENT = auto()
    DOWNLOAD_FULL_REPORT = auto()
    DOWNLOAD_SHORT_REPORT = auto()
    DOWNLOAD_FINISH_REPORT = auto()
    DOWNLOAD_ANSWER = auto()
    INTERACTIVE_REPORT = auto()
    SWITCH_TO_ADMIN = auto()


# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
__teacher_commands = {
    TeacherCommand.BAN_STUDENT: '–ó–∞–±–∞–Ω–∏—Ç—å',
    TeacherCommand.UNBAN_STUDENT: '–†–∞–∑–±–∞–Ω–∏—Ç—å',
    TeacherCommand.DOWNLOAD_ANSWER: '–°–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã',
    TeacherCommand.INTERACTIVE_REPORT: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
    TeacherCommand.DOWNLOAD_FULL_REPORT: '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç',
    TeacherCommand.DOWNLOAD_SHORT_REPORT: '–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç',
    TeacherCommand.DOWNLOAD_FINISH_REPORT: '–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç',
    TeacherCommand.SWITCH_TO_ADMIN: 'ü•∑',
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def create_teacher_keyboard(message: Message | None = None) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(row_width=3)
    markup.add(
        KeyboardButton(__teacher_commands[TeacherCommand.DOWNLOAD_ANSWER]),
        KeyboardButton(__teacher_commands[TeacherCommand.DOWNLOAD_FINISH_REPORT]),
    )
    markup.add(
        KeyboardButton(__teacher_commands[TeacherCommand.DOWNLOAD_FULL_REPORT]),
        KeyboardButton(__teacher_commands[TeacherCommand.DOWNLOAD_SHORT_REPORT]),
    )
    markup.add(
        KeyboardButton(__teacher_commands[TeacherCommand.INTERACTIVE_REPORT]),
    )

    footer_buttons = [
        KeyboardButton(__teacher_commands[TeacherCommand.BAN_STUDENT]),
        KeyboardButton(__teacher_commands[TeacherCommand.UNBAN_STUDENT]),
    ]

    if is_admin(message.from_user.id):
        footer_buttons.append(
            KeyboardButton(__teacher_commands[TeacherCommand.SWITCH_TO_ADMIN])
        )
    markup.add(*footer_buttons)
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.message_handler(
    is_teacher=True, func=lambda message: is_teacher_command(message.text)
)
async def handle_commands(message: Message):
    command = get_current_teacher_command(message.text)
    match command:
        case TeacherCommand.SWITCH_TO_ADMIN:
            await switch_teacher_to_admin_menu(message)
        case TeacherCommand.DOWNLOAD_FULL_REPORT:
            await create_teacher_groups_button(message, 'fullReport')
        case TeacherCommand.DOWNLOAD_FINISH_REPORT:
            await create_teacher_groups_button(message, 'finishReport')
        case TeacherCommand.DOWNLOAD_SHORT_REPORT:
            await create_teacher_groups_button(message, 'shortReport')
        case TeacherCommand.BAN_STUDENT:
            await create_teacher_groups_button(message, 'groupBan')
        case TeacherCommand.UNBAN_STUDENT:
            await create_unban_student_buttons(message)
        case TeacherCommand.INTERACTIVE_REPORT:
            await create_teacher_groups_button(message, 'interactiveGrRep')
        case TeacherCommand.DOWNLOAD_ANSWER:
            await create_teacher_discipline_button(message, 'dowTAnswersDis')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞
async def switch_teacher_to_admin_menu(message: Message):
    teacher_crud.switch_teacher_mode_to_admin(message.from_user.id)
    await bot.send_message(
        message.chat.id,
        '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞',
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=admin_keyboard.first_admin_keyboard(message),
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def is_teacher_command(command: str) -> bool:
    for key, value in __teacher_commands.items():
        if value == command:
            return True
    return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É
def get_current_teacher_command(command: str) -> TeacherCommand:
    for key, value in __teacher_commands.items():
        if value == command:
            return key
    raise TeacherException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
