from enum import Enum, auto

from telebot.types import KeyboardButton, ReplyKeyboardMarkup, Message

from database.main_db import admin_crud
from homeworkbot import bot
from homeworkbot.admin_handlers.add_chat import _handle_add_chat
from homeworkbot.admin_handlers.add_teacher import _handle_add_teacher
from homeworkbot.admin_handlers.unban_student import create_unban_student_buttons
from homeworkbot.admin_handlers.add_student import _handle_add_student
from homeworkbot.admin_handlers.add_discipline import _handle_add_discipline
from homeworkbot.admin_handlers.add_students_group import _handle_add_students_group
from homeworkbot.admin_handlers.upload_tests import _handle_upload_tests
from homeworkbot.admin_handlers.upload_start_configuration import _handle_upload_start_configuration
from homeworkbot.admin_handlers.utils import create_teachers_button, create_groups_button, create_discipline_button
from homeworkbot.admin_handlers.download_all_test_and_answer import _handle_download_all_test_and_answer
from homeworkbot.teacher_handlers import create_teacher_keyboard


class AdminException(Exception):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""

    def __init__(self, message):
        super().__init__(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è AdminCommand –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
class AdminCommand(Enum):
    ADD_GROUP = auto()
    ADD_TEACHER = auto()
    ADD_STUDENT = auto()
    ADD_DISCIPLINE = auto()
    ADD_CHAT = auto()
    SET_TEACHER_TO_GROUP = auto()
    SET_TEACHER_TO_DISCIPLINE = auto()
    BAN_STUDENT = auto()
    UNBAN_STUDENT = auto()
    UPLOAD_CONFIGURATION = auto()
    UPLOAD_TESTS = auto()
    ADD_STUDENTS_GROUP = auto()
    NEXT = auto()
    BACK = auto()
    DELETE_STUDENT = auto()
    DELETE_TEACHER = auto()
    DELETE_GROUP = auto()
    DOWNLOAD_FULL_REPORT = auto()
    DOWNLOAD_SHORT_REPORT = auto()
    DOWNLOAD_FINISH_REPORT = auto()
    DOWNLOAD_ANSWER = auto()
    DOWNLOAD_ALL_ANSWER_WITH_TEST = auto()
    SWITCH_TO_TEACHER = auto()


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
__admin_commands = {
    AdminCommand.UPLOAD_TESTS: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã',
    AdminCommand.UPLOAD_CONFIGURATION: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
    AdminCommand.BAN_STUDENT: '–ó–∞–±–∞–Ω–∏—Ç—å',
    AdminCommand.UNBAN_STUDENT: '–†–∞–∑–±–∞–Ω–∏—Ç—å',
    AdminCommand.SET_TEACHER_TO_DISCIPLINE: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
    AdminCommand.SET_TEACHER_TO_GROUP: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥—É –≥—Ä—É–ø–ø—É',
    AdminCommand.ADD_STUDENTS_GROUP: '–î–æ–±. –≥—Ä. —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
    AdminCommand.ADD_STUDENT: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞',
    AdminCommand.ADD_TEACHER: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞',
    AdminCommand.ADD_DISCIPLINE: '–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É',
    AdminCommand.ADD_CHAT: '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç',
    AdminCommand.NEXT: '‚û°',
    AdminCommand.BACK: '‚¨Ö',
    AdminCommand.DELETE_STUDENT: '–£–¥–∞–ª. —Å—Ç—É–¥–µ–Ω—Ç–∞',
    AdminCommand.DELETE_GROUP: '–£–¥–∞–ª. –≥—Ä—É–ø–ø—É',
    AdminCommand.DELETE_TEACHER: '–£–¥–∞–ª. –ø—Ä–µ–ø–æ–¥–∞',
    AdminCommand.DOWNLOAD_ANSWER: '–°–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã',
    AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST: '–°–∫–∞—á–∞—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã',
    AdminCommand.DOWNLOAD_FULL_REPORT: '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç',
    AdminCommand.DOWNLOAD_SHORT_REPORT: '–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç',
    AdminCommand.DOWNLOAD_FINISH_REPORT: '–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç',
    AdminCommand.SWITCH_TO_TEACHER: 'üë®‚Äçüè´'
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def first_admin_keyboard(message: Message) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(row_width=3)
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.ADD_TEACHER]),
        KeyboardButton(__admin_commands[AdminCommand.ADD_CHAT])
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.ADD_STUDENT]),
        KeyboardButton(__admin_commands[AdminCommand.ADD_DISCIPLINE]),
        KeyboardButton(__admin_commands[AdminCommand.ADD_STUDENTS_GROUP])
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.SET_TEACHER_TO_DISCIPLINE]),
        KeyboardButton(__admin_commands[AdminCommand.SET_TEACHER_TO_GROUP]),

    )
    footer_buttons = []

    if admin_crud.is_teacher(message.from_user.id):
        footer_buttons.append(KeyboardButton(__admin_commands[AdminCommand.SWITCH_TO_TEACHER]))

    # footer_buttons.append(KeyboardButton(__admin_commands[AdminCommand.NEXT]))
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.NEXT]),
        KeyboardButton(__admin_commands[AdminCommand.SWITCH_TO_TEACHER])
    )

    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def second_admin_keyboard(message: Message | None = None) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(row_width=3)
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.DOWNLOAD_ANSWER]),
        KeyboardButton(__admin_commands[AdminCommand.DOWNLOAD_FINISH_REPORT]),
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.DOWNLOAD_FULL_REPORT]),
        KeyboardButton(__admin_commands[AdminCommand.DOWNLOAD_SHORT_REPORT]),
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST]),
        KeyboardButton(__admin_commands[AdminCommand.BAN_STUDENT]),
        KeyboardButton(__admin_commands[AdminCommand.UNBAN_STUDENT]),
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.BACK]),
        KeyboardButton(__admin_commands[AdminCommand.NEXT])
    )
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def third__admin_keyboard(message: Message | None = None) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(row_width=3)
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.DELETE_GROUP]),
        KeyboardButton(__admin_commands[AdminCommand.DELETE_TEACHER]),
        KeyboardButton(__admin_commands[AdminCommand.DELETE_STUDENT]),
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.UPLOAD_TESTS]),
        KeyboardButton(__admin_commands[AdminCommand.UPLOAD_CONFIGURATION])
    )
    markup.add(
        KeyboardButton(__admin_commands[AdminCommand.BACK]),
    )
    return markup


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin_command(command: str) -> bool:
    for key, value in __admin_commands.items():
        if value == command:
            return True
    return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è AdminCommand –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
def get_current_admin_command(command: str) -> AdminCommand:
    for key, value in __admin_commands.items():
        if value == command:
            return key
    raise AdminException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


__menu_index: dict[int, int] = {}
__menu_list = [
    first_admin_keyboard,
    second_admin_keyboard,
    third__admin_keyboard,
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(is_admin=True, func=lambda message: is_admin_command(message.text))
async def handle_commands(message: Message):
    command = get_current_admin_command(message.text)
    match command:
        case AdminCommand.ADD_CHAT:
            await _handle_add_chat(message)
        case AdminCommand.ADD_STUDENT:
            await _handle_add_student(message)
        case AdminCommand.ADD_TEACHER:
            await _handle_add_teacher(message)
        case AdminCommand.ADD_STUDENTS_GROUP:
            await _handle_add_students_group(message)
        case AdminCommand.ADD_DISCIPLINE:
            await _handle_add_discipline(message)
        case AdminCommand.BAN_STUDENT:
            await create_groups_button(message, 'groupBan')
        case AdminCommand.UNBAN_STUDENT:
            await create_unban_student_buttons(message)
        case AdminCommand.NEXT:
            if message.from_user.id not in __menu_index:
                __menu_index[message.from_user.id] = 1
            else:
                __menu_index[message.from_user.id] += 1
            index = __menu_index[message.from_user.id]
            await bot.send_message(
                message.chat.id,
                "–°–º–µ–Ω–∞ –º–µ–Ω—é",
                reply_markup=__menu_list[index](message),
            )
        case AdminCommand.BACK:
            if message.from_user.id not in __menu_index:
                __menu_index[message.from_user.id] = 0
            else:
                __menu_index[message.from_user.id] -= 1
            index = __menu_index[message.from_user.id]
            await bot.send_message(
                message.chat.id,
                "–°–º–µ–Ω–∞ –º–µ–Ω—é",
                reply_markup=__menu_list[index](message),
            )
        case AdminCommand.SET_TEACHER_TO_GROUP:
            await create_teachers_button(message, 'assignTeacherGR')
        case AdminCommand.SET_TEACHER_TO_DISCIPLINE:
            await create_teachers_button(message, 'assignTeacherDis')
        case AdminCommand.DELETE_GROUP:
            await create_groups_button(message, 'groupDel')
        case AdminCommand.DELETE_STUDENT:
            await create_groups_button(message, 'groupStudDel')
        case AdminCommand.DELETE_TEACHER:
            await create_teachers_button(message, 'delTeacher')
        case AdminCommand.UPLOAD_TESTS:
            await _handle_upload_tests(message)
        case AdminCommand.UPLOAD_CONFIGURATION:
            await _handle_upload_start_configuration(message)
        case AdminCommand.SWITCH_TO_TEACHER:
            admin_crud.switch_admin_mode_to_teacher(message.from_user.id)
            await switch_admin_to_teacher_menu(message)
        case AdminCommand.DOWNLOAD_FULL_REPORT:
            await create_groups_button(message, 'fullReport')
        case AdminCommand.DOWNLOAD_ANSWER:
            await create_discipline_button(message, 'dowAnswersDis')
        case AdminCommand.DOWNLOAD_FINISH_REPORT:
            await create_groups_button(message, 'finishReport')
        case AdminCommand.DOWNLOAD_SHORT_REPORT:
            await create_groups_button(message, 'shortReport')
        case AdminCommand.DOWNLOAD_ALL_ANSWER_WITH_TEST:
            await _handle_download_all_test_and_answer(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
async def switch_admin_to_teacher_menu(message: Message):
    await bot.send_message(
        message.chat.id,
        "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=create_teacher_keyboard(message),
    )
